/*
Following is the class structure of the Node class:
My approach :
class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/
int findsize(Node *head)
{
    int count=0;
    if(head==NULL)
    return count;
    while(head!=NULL)
    {
        head=head->next;
        count++;
    }
    return count;
}
Node *findMiddle(Node *head) {
    // Write your code here
    Node* temp=head;
    int counter=findsize(temp);
    int halfsize=counter/2;
    while(halfsize>0)
    {
        head=head->next;
        halfsize=halfsize-1;
    }
    return head;
}
**********************************************************************************************************************************************************
2 Pointer Approach:
/*
    Time complexity: O(N)
    Space complexity: O(1)

    Where 'N' is the number of elements in the linked list
*/

Node *findMiddle(Node *head) 
{
    // If head is null just return null
    if (head == NULL) 
    {
        return head;
    }
    
    // If the Linked List has just 1 element that element is the middle
    if (head->next == NULL) 
    {
        return head;
    }
    
    Node *fast = head;
    Node *slow = head;
    while (fast != NULL && fast->next != NULL) 
    {
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}
